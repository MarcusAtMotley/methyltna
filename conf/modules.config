/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BCLCONVERT' {
        ext.args = {
            [
                params.bcl_no_lane_splitting ? "--no-lane-splitting true" : ''
            ].findAll{ it != '' }.join(' ')
        }
    }

    withName: '.*:TRIMGALORE' {
        ext.args = {
            [
                params.trim_quality    ? "-q ${params.trim_quality}"          : '',
                params.trim_min_length ? "--length ${params.trim_min_length}"  : '',
                params.trim_nextseq    ? "--nextseq ${params.trim_nextseq}"    : '',
                params.trim_adapter    ? "-a ${params.trim_adapter}"          : '',
                params.trim_stringency ? "--stringency ${params.trim_stringency}" : ''
            ].findAll{ it != '' }.join(' ')
        }
        publishDir = [
            [
                path: { "${params.outdir}/trimgalore" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip,txt}",  // QC reports - always publish
                enabled: true
            ],
            [
                path: { "${params.outdir}/trimgalore" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",  // Trimmed FASTQ files
                enabled: params.keep_intermediates  // Only if keep_intermediates=true (~140GB saved)
            ]
        ]
    }

    // METHYLSNP_HAIRPIN_PROCESSING: Step 1 - Illumina adapter trimming
    withName: '.*:METHYLSNP_HAIRPIN_PROCESSING:TRIMGALORE_ILLUMINA' {
        ext.args = {
            [
                '--max_n 5',                                                    // Maximum number of N bases allowed
                '--trim-n',                                                     // Trim N bases from ends
                '--stringency 3',                                               // Adapter overlap stringency
                '--illumina',                                                   // Use Illumina universal adapter
                params.trim_nextseq ? "--nextseq ${params.trim_nextseq}" : ''   // NextSeq 2-color chemistry quality trimming (default: 20)
            ].findAll{ it != '' }.join(' ')
        }
        publishDir = [
            [
                path: { "${params.outdir}/methylsnp_hairpin/illumina_trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.{txt,html,zip}"
            ]
        ]
    }

    // METHYLSNP_HAIRPIN_PROCESSING: Step 2 - Hairpin adapter trimming
    withName: '.*:METHYLSNP_HAIRPIN_PROCESSING:TRIMGALORE_HAIRPIN' {
        ext.prefix = { "${meta.id}_hairpin" }  // Rename to avoid collision with _val output from step 1
        ext.args = [
            '-a ATTATGATGATGATGATGAGTGTTAGGTTTGTTGTTGTTGTTGTGGT',   // Forward hairpin adapter (R1)
            '-a2 ACCACAACAACAACAACAAACCTAACACTCATCATCATCATCATAAT'   // Reverse hairpin adapter (R2)
        ].join(' ')
        publishDir = [
            [
                path: { "${params.outdir}/methylsnp_hairpin/hairpin_trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.{txt,html,zip}"
            ]
        ]
    }

    withName: 'RNABARCODEEXTRACTION' {
        ext.args = {
            [
                params.rna_adapter_name     ? "--adapter-name ${params.rna_adapter_name}"       : '',
                params.rna_adapter_sequence ? "--adapter-sequence ${params.rna_adapter_sequence}" : '',
                params.rna_error_rate       ? "--error-rate ${params.rna_error_rate}"           : '',
                params.rna_min_overlap      ? "--min-overlap ${params.rna_min_overlap}"         : '',
                params.rna_barcode_action   ? "--action ${params.rna_barcode_action}"           : '',
                // Auto-enable reverse complement search if methylation analysis is enabled, or if explicitly requested
                (params.rna_barcode_rev_comp || !params.skip_methylsnp_analysis) ? "--reverse-complement-search" : ''
            ].findAll{ it != '' }.join(' ')
        }
        publishDir = [
            [
                path: { "${params.outdir}/rna_deconvolution" },
                mode: params.publish_dir_mode,
                pattern: "cutadapt/*.{json,txt}",  // JSON/text reports - always publish
                enabled: true
            ],
            [
                path: { "${params.outdir}/rna_deconvolution" },
                mode: params.publish_dir_mode,
                pattern: "cutadapt/*.fastq",  // Barcoded/unbarcoded FASTQ files
                enabled: params.keep_intermediates  // Only if keep_intermediates=true (~870GB saved)
            ]
        ]
    }

    withName: 'METHYLSNP_PROCESSING' {
        // Using custom Singularity container with Python 2.7 + numpy + samtools + bedtools
        ext.args = ''
    }

    withName: '.*:LOFREQ_CALLPARALLEL' {
        ext.args = {
            [
                params.lofreq_call_indels   ? "--call-indels"                      : '',
                params.lofreq_min_cov       ? "-C ${params.lofreq_min_cov}"        : '',
                params.lofreq_max_depth     ? "-d ${params.lofreq_max_depth}"      : '',
                params.lofreq_min_bq        ? "-q ${params.lofreq_min_bq}"         : '',
                params.lofreq_min_alt_bq    ? "-Q ${params.lofreq_min_alt_bq}"     : '',
                params.lofreq_def_alt_bq    ? "-J ${params.lofreq_def_alt_bq}"     : '',
                params.lofreq_def_ref_bq    ? "-K ${params.lofreq_def_ref_bq}"     : '',
                params.lofreq_sig           ? "-s ${params.lofreq_sig}"            : '',
                params.lofreq_chunk_size    ? "--chunk-size ${params.lofreq_chunk_size}" : ''
            ].findAll{ it != '' }.join(' ')
        }
        publishDir = [
            [
                path: { "${params.outdir}/variants" },
                mode: params.publish_dir_mode,
                pattern: "*.{vcf.gz,vcf.gz.tbi}"
            ]
        ]
    }

    // STAR Genome Index Generation Configuration
    withName: 'STAR_GENOMEGENERATE' {
        ext.args = [
            '--sjdbScore 1',                       // Extra alignment score for alignments that cross database junctions
            '--sjdbGTFfeatureExon exon',          // Feature type in GTF file to be used as exons for building indices
            '--sjdbGTFtagExonParentTranscript transcript_id', // GTF attribute name for parent transcript ID
            '--sjdbGTFtagExonParentGene gene_id'   // GTF attribute name for parent gene ID
        ].join(' ')

        publishDir = [
            [
                path: { "${params.reference_cache_dir}/star_indexes/${meta.genome_id ?: 'genome'}" },
                mode: params.publish_dir_mode,
                pattern: "star/*",
                saveAs: { filename -> filename.replaceAll(/^star\//, '') }  // Remove 'star/' prefix from filenames
            ]
        ]
    }

    // Bowtie2 Index Building Configuration
    withName: 'BOWTIE2_BUILD' {
        publishDir = [
            [
                path: { "${params.reference_cache_dir}/bowtie2_indexes" },
                mode: params.publish_dir_mode,
                pattern: "bowtie2"
            ]
        ]
    }

    // SAMTOOLS FAIDX Configuration (genome indexing for variant calling)
    withName: 'PREPARE_REFERENCES:SAMTOOLS_FAIDX_GENOME' {
        publishDir = [
            [
                path: { "${params.reference_cache_dir}/fasta" },
                mode: params.publish_dir_mode,
                pattern: "*.fai"
            ]
        ]
    }

    // Bowtie2 Alignment Configuration (DNA/genomic reads)
    withName: 'BOWTIE2_ALIGN' {
        ext.args = '--very-sensitive --dovetail --phred33 --no-unal'
        ext.args2 = '-h -O SAM'  // Force SAM output for methylSNP processing compatibility
        publishDir = [
            [
                path: { "${params.outdir}/alignment/bowtie2" },
                mode: params.publish_dir_mode,
                pattern: "*.{log,sam}"
            ]
        ]
    }

    // STAR Alignment Configuration (RNA/spliced reads)
    withName: 'STAR_ALIGN' {
        ext.args = [
            '--outSAMtype SAM',                    // Output SAM format for methylSNP compatibility
            '--outSAMunmapped Within',             // Include unmapped reads in SAM output
            '--outSAMattributes Standard',         // Standard SAM attributes
            '--outFilterType BySJout',             // Filter out alignments containing novel junctions
            '--outFilterMultimapNmax 20',          // Maximum number of multiple alignments allowed
            '--outFilterMismatchNmax 999',         // Maximum number of mismatches allowed
            '--outFilterMismatchNoverReadLmax 0.04', // Maximum ratio of mismatches to read length
            '--alignIntronMin 20',                 // Minimum intron length
            '--alignIntronMax 1000000',            // Maximum intron length
            '--alignMatesGapMax 1000000',          // Maximum genomic distance between mates
            '--alignSJoverhangMin 8',              // Minimum splice junction overhang
            '--alignSJDBoverhangMin 1'             // Minimum splice junction database overhang
        ].join(' ')

        publishDir = [
            [
                path: { "${params.outdir}/alignment/star" },
                mode: params.publish_dir_mode,
                pattern: "*.{Log.final.out,Log.out}",  // Only logs, not SAM files
                enabled: true
            ],
            [
                path: { "${params.outdir}/alignment/star" },
                mode: params.publish_dir_mode,
                pattern: "*.sam",
                enabled: params.keep_intermediates  // Only publish SAM if keep_intermediates=true
            ]
        ]
    }

    // SAMTOOLS VIEW Configuration (SAM to BAM conversion for featureCounts)
    withName: 'SAMTOOLS_VIEW' {
        ext.args = '--output-fmt bam'  // Convert SAM to BAM
        publishDir = [
            [
                path: { "${params.outdir}/alignment/bam_intermediate" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: params.keep_intermediates  // Only publish unsorted BAM if keep_intermediates=true
            ]
        ]
    }

    // SAMTOOLS SORT Configuration (sort BAM files for downstream analysis)
    withName: 'SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }  // Add .sorted suffix to avoid input/output name collision
        publishDir = [
            [
                path: { "${params.outdir}/alignment/sorted_bam" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai}",
                enabled: true  // Always publish sorted BAM - this is a final product
            ]
        ]
    }

    // SAMTOOLS FLAGSTAT Configuration (DNA alignment statistics)
    withName: 'SAMTOOLS_FLAGSTAT' {
        publishDir = [
            [
                path: { "${params.outdir}/samtools" },
                mode: params.publish_dir_mode,
                pattern: "*.flagstat"
            ]
        ]
    }

    // SAMTOOLS IDXSTATS Configuration (DNA alignment statistics)
    withName: 'SAMTOOLS_IDXSTATS' {
        publishDir = [
            [
                path: { "${params.outdir}/samtools" },
                mode: params.publish_dir_mode,
                pattern: "*.idxstats"
            ]
        ]
    }

    // Mosdepth Configuration (DNA coverage analysis)
    withName: 'MOSDEPTH' {
        publishDir = [
            [
                path: { "${params.outdir}/coverage" },
                mode: params.publish_dir_mode,
                pattern: "*.{txt,gz,csi}"
            ]
        ]
    }

    // featureCounts Configuration (RNA gene quantification)
    withName: 'SUBREAD_FEATURECOUNTS' {
        ext.args = '-t exon -g gene_id'  // Count at gene level using exons
        publishDir = [
            [
                path: { "${params.outdir}/gene_counts" },
                mode: params.publish_dir_mode,
                pattern: "*.featureCounts*"
            ]
        ]
    }

    // Biscuit Index Configuration (EM-seq genome indexing)
    withName: 'BISCUIT_INDEX' {
        publishDir = [
            [
                path: { "${params.reference_cache_dir}/biscuit_indexes/${meta.genome_id ?: 'genome'}" },
                mode: params.publish_dir_mode,
                pattern: "BiscuitIndex/*",
                saveAs: { filename -> filename.replaceAll(/^BiscuitIndex\//, '') }  // Remove 'BiscuitIndex/' prefix from filenames
            ]
        ]
    }

    // BISCUIT_METHYLATION_SUMMARY Configuration (processes many large VCF files)
    withName: 'BISCUIT_METHYLATION_SUMMARY' {
        cpus   = 16
        memory = '128.GB'
        time   = '24.h'  // Increased from default 4h - processes 20+ large VCF files (multi-GB each)
    }

    // Biscuit Align Configuration (EM-seq DNA alignment)
    withName: 'BISCUIT_ALIGN' {
        ext.args = { "-b 1 -R '@RG\\tID:${meta.id}\\tSM:${meta.id}\\tPL:ILLUMINA'" }  // Retain all read mappings + add read group
        publishDir = [
            [
                path: { "${params.outdir}/alignment/biscuit" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        ]
    }

    // Picard MarkDuplicates Configuration (DNA deduplication)
    withName: 'PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.dedup" }  // Add .dedup suffix to avoid input/output name collision
        ext.args = '--ASSUME_SORTED true --VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        publishDir = [
            [
                path: { "${params.outdir}/alignment/biscuit" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai,metrics.txt}"
            ]
        ]
    }

    // Biscuit Pileup Configuration (methylation calling)
    withName: 'BISCUIT_PILEUP' {
        publishDir = [
            [
                path: { "${params.outdir}/methylation" },
                mode: params.publish_dir_mode,
                pattern: "*.vcf.gz"
            ]
        ]
    }

    // Biscuit QC Configuration (methylation quality metrics)
    withName: 'BISCUIT_QC' {
        publishDir = [
            [
                path: { "${params.outdir}/methylation/qc" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }

}
